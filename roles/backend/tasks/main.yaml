- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.dnf:   # only works for Redhat family
    name: "{{item}}"
    state: installed
  loop:
    - nodejs
    - mysql

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: run app pre-requisites
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req
  
- name: install npm dependencies
  tags:
  - deployment
  ansible.builtin.command: npm install
  args:            # args keyword is used for telling ansible to go to /app dir and run the above command
    chdir: /app    # if you dont give args, we dont know where we are in the ansible server

- name: copy backend service
  ansible.builtin.template:      #Â copying the backend service to remote server
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service


- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: enable backend service
  tags:
  - deployment  
  ansible.builtin.service:
    name: backend
    enabled: yes

- name: installing mysql dependencies
  ansible.builtin.pip:
    name:
      - PyMYSQL        # to connect MYSQL DB from ansible server
      - cryptography
    executable: pip3.9  # pip3.11 if python version is 3.11
  
- name: import data into mysql      # establishing the mysql connection by giving host, username and password
  community.mysql.mysql_db:
    login_user: "{{ login_user }}"
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import
    name: all         # to import all the data




    
